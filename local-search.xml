<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pwn基础理论(一)</title>
    <link href="/posts/8398f937a223/"/>
    <url>/posts/8398f937a223/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是溢出？"><a href="#什么是溢出？" class="headerlink" title="什么是溢出？"></a>什么是溢出？</h2><p>概念：在计算机中，当要表示的数据超出计算机所使用的数据的表示范围时，则产生数据的溢出。</p><p>产生的原因：</p><ol><li>使用非类型安全(non-type-safe)的语言，如：C/C++等。</li><li>以不可靠的方式存取或者复制内存缓冲区。</li><li>编译器设置的内存缓冲区太靠近关键数据结构。</li></ol><h2 id="什么是pwn？"><a href="#什么是pwn？" class="headerlink" title="什么是pwn？"></a>什么是pwn？</h2><p>“pwn”是一个黑客语法的俚语，是指攻破设备或者系统。发音类似“砰”，对黑客而言，这就是成功实施攻击的声音——砰的一声，被“黑”的电脑或手机就被你操纵。感觉就是向目标发送特定的数据，使其执行我们发送的恶意代码。 </p><h2 id="32位-pwn常用寄存器复习——ESP、EBP、EIP"><a href="#32位-pwn常用寄存器复习——ESP、EBP、EIP" class="headerlink" title="(32位)pwn常用寄存器复习——ESP、EBP、EIP"></a>(32位)pwn常用寄存器复习——ESP、EBP、EIP</h2><p>ESP：用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。</p><p>EBP：用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。</p><p>EIP：用来存储即将要执行的程序指令的地址。</p><h2 id="32位X86架构下常见汇编指令"><a href="#32位X86架构下常见汇编指令" class="headerlink" title="32位X86架构下常见汇编指令"></a>32位X86架构下常见汇编指令</h2><p>mov</p><p>数据传输指令，将SRC传至DST。</p><p>格式：mov DST, SRC;</p><p>pop</p><p>弹出堆栈指令，将栈顶的数据弹出并存至DST。</p><p>格式：pop DST;</p><p>add/sub</p><p>加减法指令，将运算结果存到DST。</p><p>格式：add/sub DST, SRC;</p><p>push</p><p>压入堆栈指令，将SRC压入栈内。</p><p>格式：push SRC;</p><p>lea</p><p>取地址指令，将MEM的地址存至REG。</p><p>格式：lea PEG, MEM;</p><p>call</p><p>调用指令，将当前的EIP压入栈顶，并将PTR存入EIP。</p><p>格式：call ptr</p><p>32位X86架构下汇编指令有两种格式intel与AT&amp;T</p><p>intel：寄存器名称和数值前无符号。</p><p>AT&amp;T：寄存器名字前加“%”，数值前加“$”。</p><h2 id="什么是栈帧？"><a href="#什么是栈帧？" class="headerlink" title="什么是栈帧？"></a>什么是栈帧？</h2><p>栈帧就是一个函数执行的环境：函数参数、函数的局部变量、函数执行完后返回到哪里等等。</p><p>每一个栈帧代表的就是一个未运行完的函数  。</p><p><img src="https://t.gmit.vip/2023/02/07/w92msl.png"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
